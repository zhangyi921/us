{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Index","react_default","a","createElement","src","logo","className","alt","href","target","rel","About","console","log","Users","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","e","_ref","name","setState","activeItem","listenToScroll","document","body","scrollTop","visible","state","window","addEventListener","Segment","inverted","style","margin","background","Menu","pointing","secondary","border","Item","active","onClick","color","react_router_dom","to","react_router","path","exact","component","Transition","animation","duration","id","widths","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c52c271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Menu, Segment, Transition } from 'semantic-ui-react'\nimport Zoom from 'react-reveal/Zoom';\n\n// this is my couple app demo\n// packages used: sematic ui, react reaveal\nfunction Index() {\n  return (\n    <div>\n      <h2>Home</h2>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n    </div>\n  );\n}\n\nfunction About() {\n  console.log(\"this is about\");\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  console.log(\"this is users\");\n  return <h2>Users</h2>;\n}\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { activeItem: 'home', visible: false };\n  }\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n  listenToScroll = ()=>{\n    if (document.body.scrollTop > 660) {\n      this.setState({visible: true})\n    }\n    else{\n      this.setState({visible: false})\n\n    }\n  }\n  componentDidMount() {\n    window.addEventListener('scroll', this.listenToScroll)\n  }\n  render(){\n    const { activeItem } = this.state;\n    return (\n      <div className=\"App\">\n        <Segment inverted style={{margin:0, background: \"#a0d2ff\", }} className=\"top-menu-bar\">\n          <Menu inverted pointing secondary style={{border:\"#a0d2ff\"}}>\n            <Menu.Item name='home' active={activeItem === 'home'} onClick={this.handleItemClick} style={{background: \"#a0d2ff\"}} color={\"pink\"}/>\n            <Menu.Item\n              name='messages'\n              active={activeItem === 'messages'}\n              onClick={this.handleItemClick}\n              style={{background: \"#a0d2ff\"}}\n              color={\"pink\"}\n            />\n            <Menu.Item\n              name='friends'\n              active={activeItem === 'friends'}\n              onClick={this.handleItemClick}\n              style={{background: \"#a0d2ff\"}}\n              color={\"pink\"}\n            />\n          </Menu>\n        </Segment>\n        <header className=\"App-header\">\n          \n          <Router>\n          <div>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home1</Link>\n                </li>\n                <li>\n                  <Link to=\"/about/\">About</Link>\n                </li>\n                <li>\n                  <Link to=\"/users/\">Users</Link>\n                </li>\n              </ul>\n            </nav>\n\n            <Route path=\"/\" exact component={Index} />\n            <Route path=\"/about/\" component={About} />\n            <Route path=\"/users/\" component={Users} />\n          </div>\n        </Router>\n        </header>\n        <Transition visible={this.state.visible} animation='scale' duration={500}>\n          <Segment inverted id = 'menubar'>\n            <Menu color={\"pink\"} widths={3}>\n              <Menu.Item name='home' active={activeItem === 'home'} onClick={this.handleItemClick} />\n              <Menu.Item\n                name='messages'\n                active={activeItem === 'messages'}\n                onClick={this.handleItemClick}\n              />\n              <Menu.Item\n                name='friends'\n                active={activeItem === 'friends'}\n                onClick={this.handleItemClick}\n              />\n            </Menu>\n          </Segment>\n        </Transition>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}